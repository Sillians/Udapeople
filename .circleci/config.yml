version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here
      workflow_id:
        type: string
      event:
        type: string
    steps:
      - run:
          name: Destroy environments << parameters.workflow_id >>
          when: on_fail
          command: |
            # Your code here
            echo "Destroying environment: <<parameters.workflow_id>> "
            # aws s3 rm s3://udapeople-<< parameters.workflow_id >> --recursive
            aws cloudformation delete-stack --stack-name udapeople-backend-<<parameters.workflow_id>>
            aws cloudformation delete-stack --stack-name udapeople-frontend-<<parameters.workflow_id>>
            # exit 1

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      workflow_id:
        type: string
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS = $(curl -H "token:${CIRCLE_WORKFLOW_ID:0:7}" --request GET  https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7}
            echo $SUCCESS
            if (( $SUCCESS==1 ));
            then
              cd ~/project/backend
              npm install
            # Add revert code here. You can find this in the Getting Started section.
            # exit 1
              npm run migrations:revert
            fi
          
      
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            # Your code here
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             # Your code here
             cd backend
             npm install
             npm run build
            #  exit 1
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache: 
          keys: [frontend-test]
      # Your job code here
      - run:
          name: Run frontend test
          command: |
            # my code her
            cd frontend
            npm install
            npm run test

                
  test-backend:
    docker:
      # Docker image here
      - image : circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [backend-test]
      # Your job code here
      - run:
          name: Run backend test
          command: |
            # my code her
            cd backend
            npm install
            npm run test
            
  scan-frontend:
    docker:
      # Docker image here
      - image : circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [frontend-scan]
      # Your job code here
      - run:
          name: Frontend Scan
          command: | 
            cd frontend
            npm install
            # npm install oauth-sign@^0.9.0
            # npm audit --audit-level=critical
            # npm audit fix --audit-level=critical
            npm audit fix --audit-level=critical --force

        

  scan-backend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [backend-scan]
      # Your job code here
      - run:
          name: Backend Scan
          command: | 
            cd backend
            npm install
            # npm install oauth-sign@^0.9.0
            # npm audit --audit-level=critical
            npm audit fix --audit-level=critical
            # npm audit fix --audit-level=critical --force

  deploy-infrastructure:
    docker:
    # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run: yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --region ${AWS_DEFAULT_REGION} \
              --tags project=udapeople-backend
              # exit 1
              
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --region ${AWS_DEFAULT_REGION} \
              --tags project=udapeople-frontend
              # exit 1
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            # Your code here
            aws ec2 describe-instances \
              --query "Reservations[*].Instances[*].PublicIpAddress" \
              --filters "Name=tag:Project,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text >> inventory
              # --output text >> .circleci/ansible/inventory.txt
            cat inventory
            # exit 1
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure 
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
          event: on_fail    

  configure-infrastructure:
    docker:
      # Docker image here that supports Ansible
      - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints: 
            - "bd:35:d1:82:bb:e3:ac:02:6d:92:ff:96:ef:1d:3e:93"
      # attach workspace
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          working_directory: ./.circleci/ansible
          command: |
            # Your code here
            apk add --update ansible
            ansible --version
            # exit 1
      - run:
          name: Configure server
          working_directory: ./.circleci/ansible
          command: |
            # Your code here
            # cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml
            
            # exit 1
      # Here's where you will add some code to rollback on failure
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
          event: on_fail     

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: prepare environment for backend build
          command: |
            echo "Preparing environment for backend build"
            echo ENVIRONMENT=$ENVIRONMENT >> backend/.env
            echo TYPEORM_CONNECTION=$TYPEORM_CONNECTION >> backend/.env
            echo TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR >> backend/.env
            echo TYPEORM_ENTITIES=$TYPEORM_ENTITIES >> backend/.env
            echo TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS >> backend/.env
            echo TYPEORM_HOST=$TYPEORM_HOST >> backend/.env
            echo TYPEORM_PORT=$TYPEORM_PORT >> backend/.env
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> backend/.env
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> backend/.env
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> backend/.env
      - run:
          name: Install dependencies
          command: |
            sudo apt update
            sudo apt install -y awscli

      - run:
          name: Run migrations
          command: |
            # Your code here
            cd backend
            npm install
            npm install typescript
            npm --update install python3 npm
            npm run build
            npm run migrations:revert
            # Run and sve the migration output
            npm run migrations > migrations_dump.txt
            cat migrations_dump.txt
      - run:
          name: Send migration results to memstash
          working_directory: ./backend
          command: |
            # Your code here
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              echo "DB migration was successful, will update memstash..."
              curl -H "Content-Type: text/plain" -H "token: ${CIRCLE_WORKFLOW_ID}" \
                --request PUT --data "1" \
                https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7}
            fi
      - persist_to_workspace:
          root: ~/project
          paths:
            - backend
    #  Here's where you will add some code to rollback on failure      
      # - revert-migrations:
      #     workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
          event: on_fail 

  deploy-frontend:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install tar/gzip utility
          command: |
            yum install -y tar gzip
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            # your code here
            sudo apt-get install unzip
            sudo apt-get update && sudo apt-get install -yy less
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - run:
          name: Get backend url
          command: |
            # your code here
            # BACKEND_IP = 34.209.154.6
            export BACKEND_IP=$(aws ec2 describe-instances --query "Reservations[*].Instances[*].PublicIpAddress" --output=text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      # Here's where you will add some code to rollback on failure   
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
          event: on_fail 
                    
  deploy-backend:
    docker:
      # Docker image here that supports Ansible
      - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints: 
            - "bd:35:d1:82:bb:e3:ac:02:6d:92:ff:96:ef:1d:3e:93"
      # attach workspace
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            # your code here
            apk add --update ansible curl rsync openssh nodejs npm
            ansible --version
            pip install awscli
            aws --version
      - run:
          name: Deploy backend
          command: |
            # your code here
            cd backend
            npm i
            npm run build
            cd ..
            # Zip the directory
            tar -C backend -czvf artifact.tar.gz .
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      # Here's where you will add some code to rollback on failure  

  # smoke-test:
  #   docker:
  #     # Lightweight Docker image 
  #   steps:
  #     # Checkout code from git
  #     - run:
  #         name: Install dependencies
  #         command: |
  #           # your code here
  #     - run:
  #         name: Get backend url
  #         command: |
  #           # your code here
  #     - run:
  #         name: Backend smoke test.
  #         command: |
  #           # your code here
  #     - run:
  #         name: Frontend smoke test.
  #         command: |
  #           # your code here
      # Here's where you will add some code to rollback on failure  

  # cloudfront-update:
  #   docker:
  #     # Docker image here that supports AWS CLI
  #   steps:
  #     # Checkout code from git
  #     - run:
  #         name: Install dependencies
  #         command: |
  #           # your code here
  #     - run:
  #         name: Update cloudfront distribution
  #         command: |
  #           # your code here
      # Here's where you will add some code to rollback on failure  

cleanup:
    docker:
      # Docker image here
    steps:
      # Checkout code from git
      - run:
          name: Get old stack workflow id
          command: |
            # your code here
            export OldWorkflowID="the id here"
            export STACKS=[] #put the list of stacks here
      - run:
          name: Remove old stacks and files
          command: |
            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            then
              # your code here
            fi
            

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              # only: [test-feature-branch]
              only: [ main ]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      # - deploy-backend:
      #     requires: [run-migrations]
      # - smoke-test:
      #     requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]